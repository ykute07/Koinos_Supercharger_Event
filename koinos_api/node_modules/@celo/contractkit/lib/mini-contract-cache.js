"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MiniContractCache = void 0;
var base_1 = require("@celo/base");
var base_2 = require("./base");
var celo_tokens_1 = require("./celo-tokens");
var Accounts_1 = require("./generated/Accounts");
var Exchange_1 = require("./generated/Exchange");
var ExchangeBRL_1 = require("./generated/ExchangeBRL");
var ExchangeEUR_1 = require("./generated/ExchangeEUR");
var GasPriceMinimum_1 = require("./generated/GasPriceMinimum");
var GoldToken_1 = require("./generated/GoldToken");
var StableToken_1 = require("./generated/StableToken");
var StableTokenBRL_1 = require("./generated/StableTokenBRL");
var StableTokenEUR_1 = require("./generated/StableTokenEUR");
var Accounts_2 = require("./wrappers/Accounts");
var Exchange_2 = require("./wrappers/Exchange");
var GasPriceMinimum_2 = require("./wrappers/GasPriceMinimum");
var GoldTokenWrapper_1 = require("./wrappers/GoldTokenWrapper");
var StableTokenWrapper_1 = require("./wrappers/StableTokenWrapper");
var MINIMUM_CONTRACTS = (_a = {},
    _a[base_2.CeloContract.Accounts] = {
        newInstance: Accounts_1.newAccounts,
        wrapper: Accounts_2.AccountsWrapper,
    },
    _a[base_2.CeloContract.GasPriceMinimum] = {
        newInstance: GasPriceMinimum_1.newGasPriceMinimum,
        wrapper: GasPriceMinimum_2.GasPriceMinimumWrapper,
    },
    _a[base_2.CeloContract.GoldToken] = {
        newInstance: GoldToken_1.newGoldToken,
        wrapper: GoldTokenWrapper_1.GoldTokenWrapper,
    },
    _a[base_2.CeloContract.Exchange] = {
        newInstance: Exchange_1.newExchange,
        wrapper: Exchange_2.ExchangeWrapper,
    },
    _a[base_2.CeloContract.ExchangeEUR] = {
        newInstance: ExchangeEUR_1.newExchangeEur,
        wrapper: Exchange_2.ExchangeWrapper,
    },
    _a[base_2.CeloContract.ExchangeBRL] = {
        newInstance: ExchangeBRL_1.newExchangeBrl,
        wrapper: Exchange_2.ExchangeWrapper,
    },
    _a[base_2.CeloContract.StableToken] = {
        newInstance: StableToken_1.newStableToken,
        wrapper: StableTokenWrapper_1.StableTokenWrapper,
    },
    _a[base_2.CeloContract.StableTokenBRL] = {
        newInstance: StableTokenBRL_1.newStableTokenBrl,
        wrapper: StableTokenWrapper_1.StableTokenWrapper,
    },
    _a[base_2.CeloContract.StableTokenEUR] = {
        newInstance: StableTokenEUR_1.newStableTokenEur,
        wrapper: StableTokenWrapper_1.StableTokenWrapper,
    },
    _a);
var contractsWhichRequireCache = new Set([
    base_2.CeloContract.Attestations,
    base_2.CeloContract.DoubleSigningSlasher,
    base_2.CeloContract.DowntimeSlasher,
    base_2.CeloContract.Election,
    base_2.CeloContract.Governance,
    base_2.CeloContract.LockedGold,
    base_2.CeloContract.Validators,
]);
/**
 * Alternative Contract Cache with Minimal Contracts
 *
 * Provides access to a subset of wrappers: {@link AccountsWrapper},  {@link ExchangeWrapper}, {@link GasPriceMinimumWrapper} and Celo Token contracts
 * Used internally by {@link MiniContractKit}
 *
 * @param connection – {@link Connection}
 * @param registry – {@link AddressRegistry}
 */
var MiniContractCache = /** @class */ (function () {
    function MiniContractCache(connection, registry, contractClasses) {
        if (contractClasses === void 0) { contractClasses = MINIMUM_CONTRACTS; }
        this.connection = connection;
        this.registry = registry;
        this.contractClasses = contractClasses;
        this.cache = new Map();
    }
    MiniContractCache.prototype.getAccounts = function () {
        return this.getContract(base_2.CeloContract.Accounts);
    };
    MiniContractCache.prototype.getExchange = function (stableToken) {
        if (stableToken === void 0) { stableToken = base_1.StableToken.cUSD; }
        return this.getContract(celo_tokens_1.stableTokenInfos[stableToken].exchangeContract);
    };
    MiniContractCache.prototype.getGoldToken = function () {
        return this.getContract(base_2.CeloContract.GoldToken);
    };
    MiniContractCache.prototype.getStableToken = function (stableToken) {
        if (stableToken === void 0) { stableToken = base_1.StableToken.cUSD; }
        return this.getContract(celo_tokens_1.stableTokenInfos[stableToken].contract);
    };
    /**
     * Get Contract wrapper
     */
    MiniContractCache.prototype.getContract = function (contract, address) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.isContractAvailable(contract)) {
                            throw new Error("This instance of MiniContracts was not given a mapping for " + contract + ". Either add it or use WrapperCache for full set of contracts");
                        }
                        if (contractsWhichRequireCache.has(contract)) {
                            throw new Error(contract + " cannot be used with MiniContracts as it requires an instance of WrapperCache to be passed in as an argument");
                        }
                        if (!(this.cache.get(contract) == null || address !== undefined)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.setContract(contract, address)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/, this.cache.get(contract)];
                }
            });
        });
    };
    MiniContractCache.prototype.setContract = function (contract, address) {
        return __awaiter(this, void 0, void 0, function () {
            var classes, instance, Klass, wrapper;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!address) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.registry.addressFor(contract)];
                    case 1:
                        address = _a.sent();
                        _a.label = 2;
                    case 2:
                        classes = this.contractClasses[contract];
                        instance = classes.newInstance(this.connection.web3, address);
                        Klass = classes.wrapper;
                        wrapper = new Klass(this.connection, instance);
                        this.cache.set(contract, wrapper);
                        return [2 /*return*/];
                }
            });
        });
    };
    MiniContractCache.prototype.invalidateContract = function (contract) {
        this.cache.delete(contract);
    };
    MiniContractCache.prototype.isContractAvailable = function (contract) {
        return !!this.contractClasses[contract];
    };
    return MiniContractCache;
}());
exports.MiniContractCache = MiniContractCache;
//# sourceMappingURL=mini-contract-cache.js.map